apply plugin: 'jacoco'

def fileFilter = [
    '**/*Parcel.class',
    '**/*$CREATOR.class',
    '**/*Test*.*',
    '**/AutoValue_*.*',
    '**/*JavascriptBridge.class',
    '**/R.class',
    '**/R$*.class',
    '**/Manifest*.*',
    'android/**/*.*',
    '**/BuildConfig.*',
    '**/*$ViewBinder*.*',
    '**/*$ViewInjector*.*',
    '**/Lambda$*.class',
    '**/Lambda.class',
    '**/*Lambda.class',
    '**/*Lambda*.class',
    '**/*$InjectAdapter.class',
    '**/*$ModuleAdapter.class',
    '**/*$ViewInjector*.class',
    '**/*_MembersInjector.class', //Dagger2 generated code
    '*/*_MembersInjector*.*', //Dagger2 generated code
    '**/*_*Factory*.*', //Dagger2 generated code
    '**/*Component*.*', //Dagger2 generated code
    '**/*Module*.*' //Dagger2 generated code
]

def getDebugTree(fullAndroidVariant, fileFilter) {
    return fileTree(dir: "${buildDir}/intermediates/app_classes/$fullAndroidVariant", excludes: fileFilter)
}


def mainSrc = "${project.projectDir}/src/main/kotlin"

def getKotlinDebugTree(fullAndroidVariant, fileFilter) {
    return fileTree(dir: "${buildDir}/tmp/kotlin-classes/$fullAndroidVariant", excludes: fileFilter)
}

jacoco {
    version = "0.8.2"
    toolVersion = "0.8.2"
}

android {
    testOptions {
        unitTests {
            includeAndroidResources = true
            returnDefaultValues = true
        }
        unitTests.all {
            jacoco {
                includeNoLocationClasses = true
//        destinationFile file("$buildDir/jacoco/test.exec-partial")
            }
        }
    }
}

if (!project.tasks.findByName('jacocoTestReport')) {

    task jacocoTestReport(type: JacocoReport) {

        if (project.hasProperty("buildType") && project.hasProperty("flavorType")) {
            String buildType = project.property("buildType").toString()
            String flavorType = project.property("flavorType").toString()
            String fullAndroidVariant = flavorType + buildType.capitalize()

            dependsOn "test${fullAndroidVariant.capitalize()}UnitTest"
            def kotlinDebugTree = getKotlinDebugTree(fullAndroidVariant, fileFilter)

            group = "Reporting"
            description = "Generating Jacoco coverage reports"

            reports {
                xml.enabled = true
                html.enabled = true
                csv.enabled = true
                xml.destination file("${rootProject.buildDir}/reports/jacocoTestReport-${project.name}.xml")
                html.destination file("${buildDir}/reports/jacoco")
                csv.destination file("${buildDir}/reports/jacocoTestReport.csv")
            }
            sourceDirectories = files([mainSrc])

            def debugTree = getDebugTree(fullAndroidVariant, fileFilter)

            classDirectories = files([debugTree], [kotlinDebugTree])
            executionData = fileTree(dir: buildDir, includes:
                ['**/*.exec', '**/*.ec'])
        }
    }
}
